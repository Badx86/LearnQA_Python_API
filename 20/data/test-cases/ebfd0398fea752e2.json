{"uid":"ebfd0398fea752e2","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1698469548986,"stop":1698469552870,"duration":3884},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f64d7487610>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f64d7487610>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1698469548986,"stop":1698469550055,"duration":1069},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"POST request to URL '/user/'","time":{"start":1698469550055,"stop":1698469551119,"duration":1064},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"POST request to URL '/user/login'","time":{"start":1698469551120,"stop":1698469551699,"duration":579},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"PUT request to URL '/user/82622'","time":{"start":1698469551699,"stop":1698469552870,"duration":1171},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az389-850"},{"name":"thread","value":"2186-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":22,"passed":0,"unknown":0,"total":22},"items":[{"uid":"58662e1a214f589f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/19//#testresult/58662e1a214f589f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1698383191547,"stop":1698383195092,"duration":3545}},{"uid":"b87ad0fd3762b186","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/18//#testresult/b87ad0fd3762b186","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1698296818473,"stop":1698296822649,"duration":4176}},{"uid":"adc86762301f670e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/17//#testresult/adc86762301f670e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1698210428002,"stop":1698210432325,"duration":4323}},{"uid":"ac347176c14c6f6a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/16//#testresult/ac347176c14c6f6a","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1698124033725,"stop":1698124038061,"duration":4336}},{"uid":"2acc182969dc128d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/15//#testresult/2acc182969dc128d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1698037627760,"stop":1698037631285,"duration":3525}},{"uid":"573961743321003","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/14//#testresult/573961743321003","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697951206864,"stop":1697951210814,"duration":3950}},{"uid":"9d8d216d3d0f3a1d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/13//#testresult/9d8d216d3d0f3a1d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697864797486,"stop":1697864801446,"duration":3960}},{"uid":"38dd1b547d5eba30","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/12//#testresult/38dd1b547d5eba30","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697778402050,"stop":1697778405956,"duration":3906}},{"uid":"90bc4b1d590481a9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/11//#testresult/90bc4b1d590481a9","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697692038157,"stop":1697692041848,"duration":3691}},{"uid":"6a5b912dd925c735","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/10//#testresult/6a5b912dd925c735","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697605642488,"stop":1697605646849,"duration":4361}},{"uid":"10ed8cf066e071c2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/9//#testresult/10ed8cf066e071c2","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697519231491,"stop":1697519235814,"duration":4323}},{"uid":"f5c6952411bcf823","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/8//#testresult/f5c6952411bcf823","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697432850732,"stop":1697432854272,"duration":3540}},{"uid":"8dbbd1b4610aaaa3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/7//#testresult/8dbbd1b4610aaaa3","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697346373163,"stop":1697346376984,"duration":3821}},{"uid":"e5a54aebf0300baa","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/6//#testresult/e5a54aebf0300baa","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697259961898,"stop":1697259966218,"duration":4320}},{"uid":"121f99a9bcc4cc46","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/5//#testresult/121f99a9bcc4cc46","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697173632733,"stop":1697173636300,"duration":3567}},{"uid":"56d90ccda85c2c59","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/4//#testresult/56d90ccda85c2c59","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697136076213,"stop":1697136080058,"duration":3845}},{"uid":"9b271a2245aba9e2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/3//#testresult/9b271a2245aba9e2","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697127767858,"stop":1697127771427,"duration":3569}},{"uid":"74a55cc0ab9e8c53","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/2//#testresult/74a55cc0ab9e8c53","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697126836193,"stop":1697126839822,"duration":3629}},{"uid":"cd400a5264b0d7de","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/1//#testresult/cd400a5264b0d7de","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697126405656,"stop":1697126409668,"duration":4012}},{"uid":"9a98ac6ae957ab4b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/2//#testresult/9a98ac6ae957ab4b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1697126056099,"stop":1697126060542,"duration":4443}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"ebfd0398fea752e2.json","parameterValues":[]}