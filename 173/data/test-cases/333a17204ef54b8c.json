{"uid":"333a17204ef54b8c","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1711516089016,"stop":1711516092531,"duration":3515},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f12da8fca10>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f12da8fca10>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1711516089016,"stop":1711516089983,"duration":967},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1711516089983,"stop":1711516090949,"duration":966},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1711516090950,"stop":1711516091471,"duration":521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/94962'","time":{"start":1711516091471,"stop":1711516092530,"duration":1059},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az730-996"},{"name":"thread","value":"2291-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":153,"passed":18,"unknown":0,"total":171},"items":[{"uid":"71bc46d2853ab961","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/172//#testresult/71bc46d2853ab961","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1711429612054,"stop":1711429616667,"duration":4613}},{"uid":"f2b29b874cd1dc75","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/171//#testresult/f2b29b874cd1dc75","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1711343269887,"stop":1711343275509,"duration":5622}},{"uid":"cec05788442c7dc6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/170//#testresult/cec05788442c7dc6","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1711256864053,"stop":1711256869156,"duration":5103}},{"uid":"63fe67a618a15a40","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/169//#testresult/63fe67a618a15a40","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1711170442024,"stop":1711170445572,"duration":3548}},{"uid":"23fab20a37d3122a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/168//#testresult/23fab20a37d3122a","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1711084083653,"stop":1711084088898,"duration":5245}},{"uid":"b2078bc0f1de3a21","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/167//#testresult/b2078bc0f1de3a21","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710997643989,"stop":1710997648577,"duration":4588}},{"uid":"1f3da1d68b4a5b66","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/166//#testresult/1f3da1d68b4a5b66","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710911206434,"stop":1710911211227,"duration":4793}},{"uid":"1a8b25e6cd9d97da","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/165//#testresult/1a8b25e6cd9d97da","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710824823388,"stop":1710824827916,"duration":4528}},{"uid":"ea104e41ac6888f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/164//#testresult/ea104e41ac6888f","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710738529439,"stop":1710738533918,"duration":4479}},{"uid":"ae4029e4fc100dec","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/163//#testresult/ae4029e4fc100dec","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710652102279,"stop":1710652106835,"duration":4556}},{"uid":"e0b196045d52a1ba","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/162//#testresult/e0b196045d52a1ba","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710565613277,"stop":1710565617899,"duration":4622}},{"uid":"108534a550529a9d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/161//#testresult/108534a550529a9d","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710479299779,"stop":1710479304944,"duration":5165}},{"uid":"6cbfb2e0cc3b8a68","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/160//#testresult/6cbfb2e0cc3b8a68","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710392834357,"stop":1710392838882,"duration":4525}},{"uid":"adb729035fed4f83","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/159//#testresult/adb729035fed4f83","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710306464427,"stop":1710306469271,"duration":4844}},{"uid":"4bdfdb63cf0428e1","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/158//#testresult/4bdfdb63cf0428e1","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710220136398,"stop":1710220141411,"duration":5013}},{"uid":"bc9da528b9636a45","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/157//#testresult/bc9da528b9636a45","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710133645361,"stop":1710133649983,"duration":4622}},{"uid":"8da9cd970df57af8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/156//#testresult/8da9cd970df57af8","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1710047174971,"stop":1710047180001,"duration":5030}},{"uid":"b2161edf1de21ec8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/155//#testresult/b2161edf1de21ec8","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1709960883291,"stop":1709960888201,"duration":4910}},{"uid":"4a8f3cacd5cda1da","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/154//#testresult/4a8f3cacd5cda1da","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1709874472893,"stop":1709874477504,"duration":4611}},{"uid":"580b717d8d7cf28","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/153//#testresult/580b717d8d7cf28","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1709788001418,"stop":1709788005185,"duration":3767}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"333a17204ef54b8c.json","parameterValues":[]}