{"uid":"923d91c9dc1eebf7","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1703480852225,"stop":1703480856202,"duration":3977},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f7e50af20d0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f7e50af20d0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1703480852225,"stop":1703480853303,"duration":1078},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1703480853303,"stop":1703480854388,"duration":1085},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1703480854389,"stop":1703480854995,"duration":606},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/87685'","time":{"start":1703480854995,"stop":1703480856202,"duration":1207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az1269-454"},{"name":"thread","value":"2187-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":80,"passed":0,"unknown":0,"total":80},"items":[{"uid":"5f672c9b06e15334","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/77//#testresult/5f672c9b06e15334","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703394429319,"stop":1703394433262,"duration":3943}},{"uid":"de86ee7ab334bc90","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/76//#testresult/de86ee7ab334bc90","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703307999055,"stop":1703308002624,"duration":3569}},{"uid":"97e8b204d50ef07b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/75//#testresult/97e8b204d50ef07b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703221626450,"stop":1703221630035,"duration":3585}},{"uid":"715d76f05f1100c7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/74//#testresult/715d76f05f1100c7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703135232610,"stop":1703135236721,"duration":4111}},{"uid":"64f52fb9973ef574","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/73//#testresult/64f52fb9973ef574","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703048707328,"stop":1703048711278,"duration":3950}},{"uid":"6763c5a4ed461f96","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/72//#testresult/6763c5a4ed461f96","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702962443417,"stop":1702962447920,"duration":4503}},{"uid":"e3769355262faed7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/71//#testresult/e3769355262faed7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702876051073,"stop":1702876055057,"duration":3984}},{"uid":"fe4bda8d817587a3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/70//#testresult/fe4bda8d817587a3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702789615094,"stop":1702789619213,"duration":4119}},{"uid":"47adf2096e7bee4f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/69//#testresult/47adf2096e7bee4f","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702703200487,"stop":1702703204793,"duration":4306}},{"uid":"fefab235dbd332b1","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/68//#testresult/fefab235dbd332b1","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702616833539,"stop":1702616837257,"duration":3718}},{"uid":"301c76c0e3d06fa0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/67//#testresult/301c76c0e3d06fa0","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702530442124,"stop":1702530445801,"duration":3677}},{"uid":"90e5dbfd23becf7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/66//#testresult/90e5dbfd23becf7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702444037322,"stop":1702444040684,"duration":3362}},{"uid":"e5c7c9bd2a4434b2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/65//#testresult/e5c7c9bd2a4434b2","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702357639456,"stop":1702357643036,"duration":3580}},{"uid":"71e6bd2ca391f8a2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/64//#testresult/71e6bd2ca391f8a2","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702271255310,"stop":1702271258884,"duration":3574}},{"uid":"330e035e2675bf22","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/63//#testresult/330e035e2675bf22","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702184804023,"stop":1702184808167,"duration":4144}},{"uid":"4696b9422e0357f0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/62//#testresult/4696b9422e0357f0","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702098398760,"stop":1702098402187,"duration":3427}},{"uid":"918bc94f50f6de75","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/61//#testresult/918bc94f50f6de75","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702012033835,"stop":1702012037704,"duration":3869}},{"uid":"d94261478c3917ff","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/60//#testresult/d94261478c3917ff","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701925648819,"stop":1701925652793,"duration":3974}},{"uid":"66156dc89e7dd234","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/59//#testresult/66156dc89e7dd234","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701839238999,"stop":1701839242886,"duration":3887}},{"uid":"6a22229f5bdb7b0f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/58//#testresult/6a22229f5bdb7b0f","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701752842043,"stop":1701752846008,"duration":3965}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"923d91c9dc1eebf7.json","parameterValues":[]}