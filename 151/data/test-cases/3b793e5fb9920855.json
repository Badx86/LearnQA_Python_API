{"uid":"3b793e5fb9920855","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1709615240592,"stop":1709615244448,"duration":3856},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7fdf75100cd0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7fdf75100cd0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1709615240592,"stop":1709615241859,"duration":1267},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1709615241860,"stop":1709615242886,"duration":1026},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1709615242886,"stop":1709615243346,"duration":460},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/93289'","time":{"start":1709615243346,"stop":1709615244448,"duration":1102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az1240-729"},{"name":"thread","value":"2372-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":149,"passed":0,"unknown":0,"total":149},"items":[{"uid":"2080d8a043a94bbf","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/150//#testresult/2080d8a043a94bbf","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1709530884615,"stop":1709530888095,"duration":3480}},{"uid":"9246ba2951849e5d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/149//#testresult/9246ba2951849e5d","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1709442428244,"stop":1709442432166,"duration":3922}},{"uid":"b75b37e511f98dd9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/148//#testresult/b75b37e511f98dd9","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1709356053858,"stop":1709356057998,"duration":4140}},{"uid":"f788fc51e3364fec","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/147//#testresult/f788fc51e3364fec","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1709269671408,"stop":1709269675197,"duration":3789}},{"uid":"1047d28714dbad79","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/146//#testresult/1047d28714dbad79","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1709183309495,"stop":1709183313730,"duration":4235}},{"uid":"465e173f2130a36e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/145//#testresult/465e173f2130a36e","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1709096894001,"stop":1709096898037,"duration":4036}},{"uid":"95438340a0f0212b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/144//#testresult/95438340a0f0212b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1709010486181,"stop":1709010489433,"duration":3252}},{"uid":"5e3d54345afe6a21","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/143//#testresult/5e3d54345afe6a21","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708924068982,"stop":1708924073403,"duration":4421}},{"uid":"6e31e1d9fca6b49","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/142//#testresult/6e31e1d9fca6b49","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708837547590,"stop":1708837551282,"duration":3692}},{"uid":"2d1a566a48c6a5cf","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/141//#testresult/2d1a566a48c6a5cf","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708751234450,"stop":1708751239962,"duration":5512}},{"uid":"df5706e985c111e3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/140//#testresult/df5706e985c111e3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708664871326,"stop":1708664875153,"duration":3827}},{"uid":"2a7f1b3e373b6ed3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/139//#testresult/2a7f1b3e373b6ed3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708578432574,"stop":1708578437331,"duration":4757}},{"uid":"e163d14e0de94c38","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/138//#testresult/e163d14e0de94c38","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708492006385,"stop":1708492009889,"duration":3504}},{"uid":"9ed061dc5d9842ec","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/137//#testresult/9ed061dc5d9842ec","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708405671577,"stop":1708405675021,"duration":3444}},{"uid":"487bc86cfa0a4485","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/136//#testresult/487bc86cfa0a4485","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708319275069,"stop":1708319278949,"duration":3880}},{"uid":"20857496911fd5d7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/135//#testresult/20857496911fd5d7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708232752924,"stop":1708232756446,"duration":3522}},{"uid":"c66703bfb8266b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/134//#testresult/c66703bfb8266b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708146398226,"stop":1708146402211,"duration":3985}},{"uid":"25d34a0987977fdc","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/133//#testresult/25d34a0987977fdc","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708060071406,"stop":1708060075328,"duration":3922}},{"uid":"5bd989653e57002","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/132//#testresult/5bd989653e57002","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707973662502,"stop":1707973666087,"duration":3585}},{"uid":"e7e36b9372f36ac","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/131//#testresult/e7e36b9372f36ac","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707887290201,"stop":1707887294093,"duration":3892}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"3b793e5fb9920855.json","parameterValues":[]}