{"uid":"cdfa3dcb2f01943e","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1731906639825,"stop":1731906645068,"duration":5243},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f365d7ea650>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f365d7ea650>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1731906639825,"stop":1731906640759,"duration":934},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1731906640759,"stop":1731906641966,"duration":1207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1731906641966,"stop":1731906642719,"duration":753},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/109265'","time":{"start":1731906642719,"stop":1731906643774,"duration":1055},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET request to URL '/user/109265'","time":{"start":1731906643774,"stop":1731906645067,"duration":1293},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az1382-240"},{"name":"thread","value":"2315-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":407,"passed":0,"unknown":0,"total":407},"items":[{"uid":"24bc7f68eb37c426","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/408//#testresult/24bc7f68eb37c426","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731820159927,"stop":1731820164486,"duration":4559}},{"uid":"86a71b584d2258e8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/407//#testresult/86a71b584d2258e8","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731733749632,"stop":1731733754074,"duration":4442}},{"uid":"1f894576b30850ab","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/406//#testresult/1f894576b30850ab","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731647397117,"stop":1731647401630,"duration":4513}},{"uid":"3ca554b474d6bef7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/405//#testresult/3ca554b474d6bef7","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731560989338,"stop":1731560994301,"duration":4963}},{"uid":"e3d590bfb23e5128","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/404//#testresult/e3d590bfb23e5128","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731474583031,"stop":1731474587986,"duration":4955}},{"uid":"9903fc5ba170f8ad","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/403//#testresult/9903fc5ba170f8ad","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731388164859,"stop":1731388169403,"duration":4544}},{"uid":"739f19ba8215014b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/402//#testresult/739f19ba8215014b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731301817523,"stop":1731301822911,"duration":5388}},{"uid":"8f794863c51de77b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/401//#testresult/8f794863c51de77b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731215334655,"stop":1731215339949,"duration":5294}},{"uid":"6e01693abef6a05e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/400//#testresult/6e01693abef6a05e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1731128916049,"stop":1731128919835,"duration":3786}},{"uid":"73abad76679d3d5d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/399//#testresult/73abad76679d3d5d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1731042562794,"stop":1731042567336,"duration":4542}},{"uid":"13f22e0ec9828b25","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/398//#testresult/13f22e0ec9828b25","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1730956174414,"stop":1730956179000,"duration":4586}},{"uid":"796c5c2673e91a2b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/397//#testresult/796c5c2673e91a2b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1730869786789,"stop":1730869792090,"duration":5301}},{"uid":"ecc4b366b4298e1e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/396//#testresult/ecc4b366b4298e1e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1730783367761,"stop":1730783372405,"duration":4644}},{"uid":"a7470f9d142d9931","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/395//#testresult/a7470f9d142d9931","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1730697034955,"stop":1730697039305,"duration":4350}},{"uid":"3e17784d0554b5f4","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/394//#testresult/3e17784d0554b5f4","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1730610541092,"stop":1730610545868,"duration":4776}},{"uid":"f39af0f7dbe2b423","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/393//#testresult/f39af0f7dbe2b423","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1730524170744,"stop":1730524175629,"duration":4885}},{"uid":"bda91a3f36386da3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/392//#testresult/bda91a3f36386da3","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1730437808238,"stop":1730437812743,"duration":4505}},{"uid":"4390c90108e7f69b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/391//#testresult/4390c90108e7f69b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1730351382954,"stop":1730351387842,"duration":4888}},{"uid":"39c6d8b85d7083e0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/390//#testresult/39c6d8b85d7083e0","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nrequests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='playground.learnqa.ru', port=443): Max retries exceeded with url: /api/user/ (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fbe06b7a550>, 'Connection to playground.learnqa.ru timed out. (connect timeout=None)'))","time":{"start":1730273636232,"stop":1730274176825,"duration":540593}},{"uid":"e8632400a3ac219f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/389//#testresult/e8632400a3ac219f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nrequests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='playground.learnqa.ru', port=443): Max retries exceeded with url: /api/user/ (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb51ab62150>, 'Connection to playground.learnqa.ru timed out. (connect timeout=None)'))","time":{"start":1730187216118,"stop":1730187756711,"duration":540593}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"cdfa3dcb2f01943e.json","parameterValues":[]}