{"uid":"a2fb9d03d7ec5b6d","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1719983280026,"stop":1719983283759,"duration":3733},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f4f1c6fb150>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f4f1c6fb150>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1719983280026,"stop":1719983280898,"duration":872},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1719983280898,"stop":1719983281790,"duration":892},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1719983281790,"stop":1719983282543,"duration":753},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/100845'","time":{"start":1719983282543,"stop":1719983283758,"duration":1215},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az1215-871"},{"name":"thread","value":"2234-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":156,"passed":113,"unknown":0,"total":269},"items":[{"uid":"809694fccd007a7c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/270//#testresult/809694fccd007a7c","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719896924900,"stop":1719896929362,"duration":4462}},{"uid":"9311f0dff34a8ad3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/269//#testresult/9311f0dff34a8ad3","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719810521973,"stop":1719810526577,"duration":4604}},{"uid":"fea72ed6fbc0f66","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/268//#testresult/fea72ed6fbc0f66","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719724062633,"stop":1719724067387,"duration":4754}},{"uid":"eb0c4a832aff11f4","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/267//#testresult/eb0c4a832aff11f4","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719637696995,"stop":1719637701656,"duration":4661}},{"uid":"f840b522178bd41d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/266//#testresult/f840b522178bd41d","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719551283965,"stop":1719551289432,"duration":5467}},{"uid":"cd59d77b338728c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/265//#testresult/cd59d77b338728c","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719464918104,"stop":1719464922635,"duration":4531}},{"uid":"30696865c6c5e87b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/264//#testresult/30696865c6c5e87b","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719378484992,"stop":1719378490181,"duration":5189}},{"uid":"f66e3fd1aae0d7c2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/263//#testresult/f66e3fd1aae0d7c2","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719292081488,"stop":1719292087043,"duration":5555}},{"uid":"b5125a4af823f298","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/262//#testresult/b5125a4af823f298","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719205706467,"stop":1719205712207,"duration":5740}},{"uid":"1a80063a2e569200","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/261//#testresult/1a80063a2e569200","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719119238999,"stop":1719119243171,"duration":4172}},{"uid":"ced4ff422eaf0487","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/260//#testresult/ced4ff422eaf0487","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1719032942672,"stop":1719032947160,"duration":4488}},{"uid":"a435677eeea86d2d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/259//#testresult/a435677eeea86d2d","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718946538774,"stop":1718946543972,"duration":5198}},{"uid":"347b98c48fe087c1","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/258//#testresult/347b98c48fe087c1","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718860075043,"stop":1718860080535,"duration":5492}},{"uid":"bec4d4d2c9f67b04","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/257//#testresult/bec4d4d2c9f67b04","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718773676495,"stop":1718773680868,"duration":4373}},{"uid":"2ab42c248885a1a8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/256//#testresult/2ab42c248885a1a8","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718687335701,"stop":1718687340174,"duration":4473}},{"uid":"83a991b7d9fba646","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/255//#testresult/83a991b7d9fba646","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718600970324,"stop":1718600975270,"duration":4946}},{"uid":"22588ce4d2f2c464","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/254//#testresult/22588ce4d2f2c464","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718514526990,"stop":1718514531153,"duration":4163}},{"uid":"e753be84fd95cc","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/253//#testresult/e753be84fd95cc","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718428111760,"stop":1718428116961,"duration":5201}},{"uid":"2ee143093a62fedd","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/252//#testresult/2ee143093a62fedd","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718341660343,"stop":1718341664840,"duration":4497}},{"uid":"d49071b36037ba45","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/251//#testresult/d49071b36037ba45","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1718255360330,"stop":1718255364770,"duration":4440}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"a2fb9d03d7ec5b6d.json","parameterValues":[]}