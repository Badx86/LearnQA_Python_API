{"uid":"bc96cc0d71c90e41","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1746767619757,"stop":1746767624605,"duration":4848},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7fa9cb9bbf10>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7fa9cb9bbf10>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1746767619757,"stop":1746767620976,"duration":1219},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1746767620976,"stop":1746767621958,"duration":982},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1746767621958,"stop":1746767622422,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/122692'","time":{"start":1746767622422,"stop":1746767623517,"duration":1095},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET request to URL '/user/122692'","time":{"start":1746767623517,"stop":1746767624605,"duration":1088},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az1369-716"},{"name":"thread","value":"2444-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":456,"passed":0,"unknown":0,"total":456},"items":[{"uid":"77bb31df4cdd0980","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/519//#testresult/77bb31df4cdd0980","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1746681238779,"stop":1746681244176,"duration":5397}},{"uid":"f0dd719600639246","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/518//#testresult/f0dd719600639246","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1746594820993,"stop":1746594825526,"duration":4533}},{"uid":"c3c4e7db15b4f7b0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/517//#testresult/c3c4e7db15b4f7b0","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1746508433390,"stop":1746508439050,"duration":5660}},{"uid":"eefdc7586c542281","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/516//#testresult/eefdc7586c542281","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1746422059441,"stop":1746422064747,"duration":5306}},{"uid":"f36c11132d7f42be","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/515//#testresult/f36c11132d7f42be","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1746335579661,"stop":1746335584208,"duration":4547}},{"uid":"c9fc6784a66e563a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/514//#testresult/c9fc6784a66e563a","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1746249143444,"stop":1746249149064,"duration":5620}},{"uid":"82b768ef622e92d8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/513//#testresult/82b768ef622e92d8","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1746162817518,"stop":1746162822228,"duration":4710}},{"uid":"724ec004c4e8a952","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/512//#testresult/724ec004c4e8a952","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1746076438759,"stop":1746076444079,"duration":5320}},{"uid":"204ddf57028d58af","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/511//#testresult/204ddf57028d58af","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745989997586,"stop":1745990002583,"duration":4997}},{"uid":"c58f34c854de1400","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/510//#testresult/c58f34c854de1400","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745903619833,"stop":1745903624741,"duration":4908}},{"uid":"d146fdc0dc75dcb","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/509//#testresult/d146fdc0dc75dcb","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745817481406,"stop":1745817486024,"duration":4618}},{"uid":"9a63845f84313502","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/508//#testresult/9a63845f84313502","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745730762935,"stop":1745730767812,"duration":4877}},{"uid":"fe43c4892a483a29","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/507//#testresult/fe43c4892a483a29","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745644318607,"stop":1745644323209,"duration":4602}},{"uid":"38c00ba313dda6e6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/506//#testresult/38c00ba313dda6e6","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745558012422,"stop":1745558018409,"duration":5987}},{"uid":"2c45798e56b46cc9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/505//#testresult/2c45798e56b46cc9","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745471623592,"stop":1745471628154,"duration":4562}},{"uid":"7c0095b2b2d0aea5","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/504//#testresult/7c0095b2b2d0aea5","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745385210583,"stop":1745385214868,"duration":4285}},{"uid":"38a0d7877b0f4723","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/503//#testresult/38a0d7877b0f4723","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745298809529,"stop":1745298814362,"duration":4833}},{"uid":"4365887b6499822d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/502//#testresult/4365887b6499822d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745212431678,"stop":1745212436265,"duration":4587}},{"uid":"2792e3f577eb62bd","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/501//#testresult/2792e3f577eb62bd","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745125942132,"stop":1745125946741,"duration":4609}},{"uid":"980f5ffb84cce6af","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/500//#testresult/980f5ffb84cce6af","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745039521576,"stop":1745039526361,"duration":4785}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"bc96cc0d71c90e41.json","parameterValues":[]}