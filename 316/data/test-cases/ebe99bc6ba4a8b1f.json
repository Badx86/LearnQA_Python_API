{"uid":"ebe99bc6ba4a8b1f","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1723871311770,"stop":1723871316228,"duration":4458},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f9508408190>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f9508408190>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1723871311770,"stop":1723871312735,"duration":965},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1723871312735,"stop":1723871313665,"duration":930},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1723871313665,"stop":1723871314105,"duration":440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/102890'","time":{"start":1723871314105,"stop":1723871315173,"duration":1068},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET request to URL '/user/102890'","time":{"start":1723871315173,"stop":1723871316228,"duration":1055},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az1205-711"},{"name":"thread","value":"2347-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":314,"passed":0,"unknown":0,"total":314},"items":[{"uid":"d162ccc474aae5fd","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/315//#testresult/d162ccc474aae5fd","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1723784909798,"stop":1723784914971,"duration":5173}},{"uid":"9e204f762205c24e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/314//#testresult/9e204f762205c24e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1723698556113,"stop":1723698561006,"duration":4893}},{"uid":"ebdfbac251c62b14","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/313//#testresult/ebdfbac251c62b14","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1723612131156,"stop":1723612135488,"duration":4332}},{"uid":"32df3da8d59f71db","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/312//#testresult/32df3da8d59f71db","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1723525736788,"stop":1723525741619,"duration":4831}},{"uid":"d0fe56f741d4f208","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/311//#testresult/d0fe56f741d4f208","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1723439336032,"stop":1723439339716,"duration":3684}},{"uid":"26212fc859ce8ee0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/310//#testresult/26212fc859ce8ee0","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='playground.learnqa.ru', port=443): Max retries exceeded with url: /api/user/ (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1006)')))","time":{"start":1723352847774,"stop":1723352848014,"duration":240}},{"uid":"17ce5a2374f73ba2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/309//#testresult/17ce5a2374f73ba2","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1723266487027,"stop":1723266492245,"duration":5218}},{"uid":"ff30cfab44f2aa8e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/308//#testresult/ff30cfab44f2aa8e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1723180144487,"stop":1723180148911,"duration":4424}},{"uid":"2e4ed62b1701d02f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/307//#testresult/2e4ed62b1701d02f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1723093755666,"stop":1723093761399,"duration":5733}},{"uid":"e882e7973eef63ae","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/306//#testresult/e882e7973eef63ae","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1723007305498,"stop":1723007309869,"duration":4371}},{"uid":"f0a6b5075eaa0465","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/305//#testresult/f0a6b5075eaa0465","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722920927419,"stop":1722920931924,"duration":4505}},{"uid":"b0b56c45cfbcf355","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/304//#testresult/b0b56c45cfbcf355","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722834621073,"stop":1722834626112,"duration":5039}},{"uid":"7ce8fe5c466de5cf","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/303//#testresult/7ce8fe5c466de5cf","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722748073687,"stop":1722748078890,"duration":5203}},{"uid":"2219ca6a3204610","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/302//#testresult/2219ca6a3204610","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722661671379,"stop":1722661676140,"duration":4761}},{"uid":"23ceae1be57d5822","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/301//#testresult/23ceae1be57d5822","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722575297448,"stop":1722575302777,"duration":5329}},{"uid":"19668176c0a56587","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/300//#testresult/19668176c0a56587","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722488907761,"stop":1722488912227,"duration":4466}},{"uid":"3c45acc4c139c86c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/299//#testresult/3c45acc4c139c86c","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722402473959,"stop":1722402478294,"duration":4335}},{"uid":"4b1e4dfe4488b997","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/298//#testresult/4b1e4dfe4488b997","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722316166768,"stop":1722316172091,"duration":5323}},{"uid":"66259befddd4235c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/297//#testresult/66259befddd4235c","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722229785449,"stop":1722229790576,"duration":5127}},{"uid":"688a4d0cb77d9ab6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/296//#testresult/688a4d0cb77d9ab6","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1722143334490,"stop":1722143338958,"duration":4468}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"ebe99bc6ba4a8b1f.json","parameterValues":[]}