{"uid":"e7e36b9372f36ac","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1707887290201,"stop":1707887294093,"duration":3892},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f6316f23050>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f6316f23050>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1707887290201,"stop":1707887291311,"duration":1110},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1707887291311,"stop":1707887292370,"duration":1059},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1707887292371,"stop":1707887292923,"duration":552},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/92280'","time":{"start":1707887292923,"stop":1707887294093,"duration":1170},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az802-432"},{"name":"thread","value":"2211-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":129,"passed":0,"unknown":0,"total":129},"items":[{"uid":"670c5d527d6a645c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/130//#testresult/670c5d527d6a645c","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707800812968,"stop":1707800816648,"duration":3680}},{"uid":"7f2f4e172cc39ae7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/129//#testresult/7f2f4e172cc39ae7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707714506300,"stop":1707714509761,"duration":3461}},{"uid":"d1c53ce835b49eec","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/128//#testresult/d1c53ce835b49eec","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707627965753,"stop":1707627969288,"duration":3535}},{"uid":"b2a231d5149f7cec","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/127//#testresult/b2a231d5149f7cec","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707541535293,"stop":1707541538625,"duration":3332}},{"uid":"a5ee3c7945d64c81","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/126//#testresult/a5ee3c7945d64c81","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707455205943,"stop":1707455209900,"duration":3957}},{"uid":"33cdcb75de1881b3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/125//#testresult/33cdcb75de1881b3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707368912260,"stop":1707368915754,"duration":3494}},{"uid":"4a55ffcb1ff88824","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/124//#testresult/4a55ffcb1ff88824","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707282462882,"stop":1707282466616,"duration":3734}},{"uid":"97a14be8d7a95c9f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/123//#testresult/97a14be8d7a95c9f","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707196023409,"stop":1707196026895,"duration":3486}},{"uid":"c7903f0460b839ee","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/122//#testresult/c7903f0460b839ee","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707109670953,"stop":1707109674202,"duration":3249}},{"uid":"e570388820074550","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/121//#testresult/e570388820074550","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707023165670,"stop":1707023169542,"duration":3872}},{"uid":"4f7ec6008182f3fb","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/120//#testresult/4f7ec6008182f3fb","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706936758994,"stop":1706936763021,"duration":4027}},{"uid":"b7a2880515fec7ee","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/119//#testresult/b7a2880515fec7ee","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706850440744,"stop":1706850444685,"duration":3941}},{"uid":"14c96a9912f7c090","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/118//#testresult/14c96a9912f7c090","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706764016894,"stop":1706764020826,"duration":3932}},{"uid":"baf26b84079cb927","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/117//#testresult/baf26b84079cb927","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706677606795,"stop":1706677610161,"duration":3366}},{"uid":"91073c7166e76810","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/116//#testresult/91073c7166e76810","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706591207706,"stop":1706591212107,"duration":4401}},{"uid":"7025834207814afd","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/115//#testresult/7025834207814afd","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706504827046,"stop":1706504830394,"duration":3348}},{"uid":"33942075fc9614a8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/114//#testresult/33942075fc9614a8","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706418454967,"stop":1706418458580,"duration":3613}},{"uid":"9e8edbd766eea782","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/113//#testresult/9e8edbd766eea782","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706332000215,"stop":1706332004514,"duration":4299}},{"uid":"3061f2bf138fe3f5","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/112//#testresult/3061f2bf138fe3f5","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706245615929,"stop":1706245620401,"duration":4472}},{"uid":"8fa885bf089c13d8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/111//#testresult/8fa885bf089c13d8","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706159241093,"stop":1706159244383,"duration":3290}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"e7e36b9372f36ac.json","parameterValues":[]}