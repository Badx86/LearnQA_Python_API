{"uid":"2d1a566a48c6a5cf","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1708751234450,"stop":1708751239962,"duration":5512},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f76cd3b8bd0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f76cd3b8bd0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1708751234450,"stop":1708751235960,"duration":1510},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1708751235960,"stop":1708751238090,"duration":2130},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1708751238091,"stop":1708751238755,"duration":664},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/92677'","time":{"start":1708751238755,"stop":1708751239961,"duration":1206},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az841-564"},{"name":"thread","value":"2222-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":139,"passed":0,"unknown":0,"total":139},"items":[{"uid":"df5706e985c111e3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/140//#testresult/df5706e985c111e3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708664871326,"stop":1708664875153,"duration":3827}},{"uid":"2a7f1b3e373b6ed3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/139//#testresult/2a7f1b3e373b6ed3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708578432574,"stop":1708578437331,"duration":4757}},{"uid":"e163d14e0de94c38","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/138//#testresult/e163d14e0de94c38","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708492006385,"stop":1708492009889,"duration":3504}},{"uid":"9ed061dc5d9842ec","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/137//#testresult/9ed061dc5d9842ec","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708405671577,"stop":1708405675021,"duration":3444}},{"uid":"487bc86cfa0a4485","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/136//#testresult/487bc86cfa0a4485","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708319275069,"stop":1708319278949,"duration":3880}},{"uid":"20857496911fd5d7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/135//#testresult/20857496911fd5d7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708232752924,"stop":1708232756446,"duration":3522}},{"uid":"c66703bfb8266b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/134//#testresult/c66703bfb8266b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708146398226,"stop":1708146402211,"duration":3985}},{"uid":"25d34a0987977fdc","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/133//#testresult/25d34a0987977fdc","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1708060071406,"stop":1708060075328,"duration":3922}},{"uid":"5bd989653e57002","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/132//#testresult/5bd989653e57002","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707973662502,"stop":1707973666087,"duration":3585}},{"uid":"e7e36b9372f36ac","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/131//#testresult/e7e36b9372f36ac","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707887290201,"stop":1707887294093,"duration":3892}},{"uid":"670c5d527d6a645c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/130//#testresult/670c5d527d6a645c","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707800812968,"stop":1707800816648,"duration":3680}},{"uid":"7f2f4e172cc39ae7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/129//#testresult/7f2f4e172cc39ae7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707714506300,"stop":1707714509761,"duration":3461}},{"uid":"d1c53ce835b49eec","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/128//#testresult/d1c53ce835b49eec","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707627965753,"stop":1707627969288,"duration":3535}},{"uid":"b2a231d5149f7cec","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/127//#testresult/b2a231d5149f7cec","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707541535293,"stop":1707541538625,"duration":3332}},{"uid":"a5ee3c7945d64c81","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/126//#testresult/a5ee3c7945d64c81","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707455205943,"stop":1707455209900,"duration":3957}},{"uid":"33cdcb75de1881b3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/125//#testresult/33cdcb75de1881b3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707368912260,"stop":1707368915754,"duration":3494}},{"uid":"4a55ffcb1ff88824","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/124//#testresult/4a55ffcb1ff88824","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707282462882,"stop":1707282466616,"duration":3734}},{"uid":"97a14be8d7a95c9f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/123//#testresult/97a14be8d7a95c9f","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707196023409,"stop":1707196026895,"duration":3486}},{"uid":"c7903f0460b839ee","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/122//#testresult/c7903f0460b839ee","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707109670953,"stop":1707109674202,"duration":3249}},{"uid":"e570388820074550","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/121//#testresult/e570388820074550","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1707023165670,"stop":1707023169542,"duration":3872}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"2d1a566a48c6a5cf.json","parameterValues":[]}