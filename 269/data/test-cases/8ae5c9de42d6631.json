{"uid":"8ae5c9de42d6631","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1719810532018,"stop":1719810535483,"duration":3465},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f4aceba6690>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f4aceba6690>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1719810532019,"stop":1719810532959,"duration":940},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1719810532959,"stop":1719810533940,"duration":981},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1719810533940,"stop":1719810534390,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/100398'","time":{"start":1719810534390,"stop":1719810535483,"duration":1093},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az1532-451"},{"name":"thread","value":"2250-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":267,"passed":0,"unknown":0,"total":267},"items":[{"uid":"196dbb344eb8aa68","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/268//#testresult/196dbb344eb8aa68","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719724072735,"stop":1719724076928,"duration":4193}},{"uid":"e723643b7fc370ea","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/267//#testresult/e723643b7fc370ea","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719637707474,"stop":1719637711663,"duration":4189}},{"uid":"63e7a59de6b2f965","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/266//#testresult/63e7a59de6b2f965","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719551296107,"stop":1719551301392,"duration":5285}},{"uid":"788d8f867fbb303c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/265//#testresult/788d8f867fbb303c","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719464927742,"stop":1719464932253,"duration":4511}},{"uid":"59801ae5ff878d44","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/264//#testresult/59801ae5ff878d44","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719378496434,"stop":1719378502304,"duration":5870}},{"uid":"c39cdd8250beb7da","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/263//#testresult/c39cdd8250beb7da","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719292093400,"stop":1719292098561,"duration":5161}},{"uid":"3cce76286966874d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/262//#testresult/3cce76286966874d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719205718517,"stop":1719205723811,"duration":5294}},{"uid":"991a80933a1826be","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/261//#testresult/991a80933a1826be","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719119248481,"stop":1719119252578,"duration":4097}},{"uid":"cd04fd92a1eacb80","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/260//#testresult/cd04fd92a1eacb80","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1719032952570,"stop":1719032957318,"duration":4748}},{"uid":"4c6ee5d602b0a7d6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/259//#testresult/4c6ee5d602b0a7d6","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718946550254,"stop":1718946555462,"duration":5208}},{"uid":"f52e97ce2563ceee","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/258//#testresult/f52e97ce2563ceee","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718860087144,"stop":1718860092274,"duration":5130}},{"uid":"2b7ced0299ebee8c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/257//#testresult/2b7ced0299ebee8c","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718773686678,"stop":1718773691414,"duration":4736}},{"uid":"b9a5cdaf8ae66b82","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/256//#testresult/b9a5cdaf8ae66b82","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718687345821,"stop":1718687350292,"duration":4471}},{"uid":"8e4f29a71d18c25b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/255//#testresult/8e4f29a71d18c25b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718600980679,"stop":1718600985473,"duration":4794}},{"uid":"b3bd58efdb9349d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/254//#testresult/b3bd58efdb9349d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1718514537103,"stop":1718514540257,"duration":3154}},{"uid":"a323dee5f9225061","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/253//#testresult/a323dee5f9225061","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718428123171,"stop":1718428128366,"duration":5195}},{"uid":"c3dc0e378f386a71","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/252//#testresult/c3dc0e378f386a71","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718341670303,"stop":1718341674596,"duration":4293}},{"uid":"3727f08b67aa7586","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/251//#testresult/3727f08b67aa7586","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718255370581,"stop":1718255375050,"duration":4469}},{"uid":"1f1d3c80a530e568","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/250//#testresult/1f1d3c80a530e568","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718168885516,"stop":1718168890020,"duration":4504}},{"uid":"c274e7ac6e40354","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/249//#testresult/c274e7ac6e40354","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718082556922,"stop":1718082561926,"duration":5004}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"8ae5c9de42d6631.json","parameterValues":[]}