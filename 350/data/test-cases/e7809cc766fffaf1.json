{"uid":"e7809cc766fffaf1","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1726808934026,"stop":1726808937409,"duration":3383},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f3eece270d0>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f3eece270d0>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1726808934026,"stop":1726808934906,"duration":880},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1726808934906,"stop":1726808935799,"duration":893},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1726808935799,"stop":1726808936404,"duration":605},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/104581'","time":{"start":1726808936404,"stop":1726808937409,"duration":1005},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az1117-655"},{"name":"thread","value":"2247-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":348,"passed":0,"unknown":0,"total":348},"items":[{"uid":"bbe16bb9b5136b0b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/349//#testresult/bbe16bb9b5136b0b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726722565277,"stop":1726722569743,"duration":4466}},{"uid":"2cddad819d8d08b0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/348//#testresult/2cddad819d8d08b0","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726636140736,"stop":1726636145722,"duration":4986}},{"uid":"cb0cd03e4553ec62","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/347//#testresult/cb0cd03e4553ec62","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726549812920,"stop":1726549817098,"duration":4178}},{"uid":"c2c52613076e4b4","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/346//#testresult/c2c52613076e4b4","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726463439817,"stop":1726463443969,"duration":4152}},{"uid":"8cdb3284b2f5ccfb","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/345//#testresult/8cdb3284b2f5ccfb","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726376966758,"stop":1726376971190,"duration":4432}},{"uid":"5c103f114061a801","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/344//#testresult/5c103f114061a801","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726290576606,"stop":1726290581791,"duration":5185}},{"uid":"1cd8b16e45349e5f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/343//#testresult/1cd8b16e45349e5f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726204155224,"stop":1726204159675,"duration":4451}},{"uid":"f3c961e27dfad616","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/342//#testresult/f3c961e27dfad616","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726117781914,"stop":1726117787311,"duration":5397}},{"uid":"d043bc01885f9b66","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/341//#testresult/d043bc01885f9b66","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1726031334121,"stop":1726031338631,"duration":4510}},{"uid":"3d1ba875b85663e6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/340//#testresult/3d1ba875b85663e6","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725944973194,"stop":1725944978161,"duration":4967}},{"uid":"2be6c43dc37b4dc6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/339//#testresult/2be6c43dc37b4dc6","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725858607212,"stop":1725858611808,"duration":4596}},{"uid":"e6eae353f274ac35","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/338//#testresult/e6eae353f274ac35","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725772202883,"stop":1725772208495,"duration":5612}},{"uid":"2bf45870d3ac1a39","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/337//#testresult/2bf45870d3ac1a39","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725685683486,"stop":1725685687901,"duration":4415}},{"uid":"4b8d290de0b227eb","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/336//#testresult/4b8d290de0b227eb","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725599346087,"stop":1725599350479,"duration":4392}},{"uid":"6907bab4f9e7d5f2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/335//#testresult/6907bab4f9e7d5f2","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725512925988,"stop":1725512930599,"duration":4611}},{"uid":"2519c456a67701f3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/334//#testresult/2519c456a67701f3","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725426609873,"stop":1725426616192,"duration":6319}},{"uid":"df8fbabb8f72220e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/333//#testresult/df8fbabb8f72220e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725340149570,"stop":1725340154807,"duration":5237}},{"uid":"7e19ced254c9c73e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/332//#testresult/7e19ced254c9c73e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725253746684,"stop":1725253751148,"duration":4464}},{"uid":"8b738c2b35632ba3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/331//#testresult/8b738c2b35632ba3","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725167400413,"stop":1725167405097,"duration":4684}},{"uid":"e6a44cdb6ebb7e1a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/330//#testresult/e6a44cdb6ebb7e1a","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1725080888777,"stop":1725080893645,"duration":4868}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"e7809cc766fffaf1.json","parameterValues":[]}