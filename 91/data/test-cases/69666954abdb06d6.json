{"uid":"69666954abdb06d6","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1704604031379,"stop":1704604035100,"duration":3721},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7fe2afee84d0>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7fe2afee84d0>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1704604031379,"stop":1704604032317,"duration":938},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1704604032317,"stop":1704604033292,"duration":975},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1704604033292,"stop":1704604034030,"duration":738},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/89170'","time":{"start":1704604034030,"stop":1704604035100,"duration":1070},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az1210-752"},{"name":"thread","value":"2211-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":93,"passed":0,"unknown":0,"total":93},"items":[{"uid":"aaf6af3fe8a7dea8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/90//#testresult/aaf6af3fe8a7dea8","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1704517625582,"stop":1704517628928,"duration":3346}},{"uid":"554ea9bdb955fa97","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/89//#testresult/554ea9bdb955fa97","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1704431252984,"stop":1704431256739,"duration":3755}},{"uid":"8c9d002e26d033dd","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/88//#testresult/8c9d002e26d033dd","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1704344859221,"stop":1704344862890,"duration":3669}},{"uid":"b17d90339b5e349c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/87//#testresult/b17d90339b5e349c","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1704258435200,"stop":1704258438802,"duration":3602}},{"uid":"9a4c079add8f6dee","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/86//#testresult/9a4c079add8f6dee","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1704172051669,"stop":1704172055717,"duration":4048}},{"uid":"6542072864a6308e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/85//#testresult/6542072864a6308e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1704085684221,"stop":1704085688348,"duration":4127}},{"uid":"8af9020001e16539","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/84//#testresult/8af9020001e16539","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703999207789,"stop":1703999211162,"duration":3373}},{"uid":"2fd7d6c92260b344","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/83//#testresult/2fd7d6c92260b344","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703912829124,"stop":1703912833131,"duration":4007}},{"uid":"a0496fc257e762d5","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/82//#testresult/a0496fc257e762d5","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703826463913,"stop":1703826468095,"duration":4182}},{"uid":"ff54a17904add6e9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/81//#testresult/ff54a17904add6e9","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703740057277,"stop":1703740060884,"duration":3607}},{"uid":"ac946b4dc47ef805","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/80//#testresult/ac946b4dc47ef805","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703653640070,"stop":1703653643694,"duration":3624}},{"uid":"3b5ebb24b4676ce6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/79//#testresult/3b5ebb24b4676ce6","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703567243000,"stop":1703567246952,"duration":3952}},{"uid":"c67d9bf5db376ff9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/78//#testresult/c67d9bf5db376ff9","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703480862457,"stop":1703480866430,"duration":3973}},{"uid":"46f1c3ff4b552f28","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/77//#testresult/46f1c3ff4b552f28","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703394439525,"stop":1703394443536,"duration":4011}},{"uid":"27d43eebe3e9cf9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/76//#testresult/27d43eebe3e9cf9","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703308008346,"stop":1703308011992,"duration":3646}},{"uid":"cd445e8360b3b7b2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/75//#testresult/cd445e8360b3b7b2","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703221635749,"stop":1703221639357,"duration":3608}},{"uid":"797b6db238943f7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/74//#testresult/797b6db238943f7","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703135243936,"stop":1703135248034,"duration":4098}},{"uid":"144f9dc7074d6fe4","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/73//#testresult/144f9dc7074d6fe4","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1703048717038,"stop":1703048720766,"duration":3728}},{"uid":"d3d8b8d4b0c6b639","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/72//#testresult/d3d8b8d4b0c6b639","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1702962454497,"stop":1702962459009,"duration":4512}},{"uid":"44735a1f1749f386","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/71//#testresult/44735a1f1749f386","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1702876061306,"stop":1702876065264,"duration":3958}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"69666954abdb06d6.json","parameterValues":[]}