{"uid":"66156dc89e7dd234","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1701839238999,"stop":1701839242886,"duration":3887},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f53df2c1090>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f53df2c1090>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1701839238999,"stop":1701839239935,"duration":936},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1701839239936,"stop":1701839240887,"duration":951},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1701839240888,"stop":1701839241592,"duration":704},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/86930'","time":{"start":1701839241592,"stop":1701839242885,"duration":1293},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az569-522"},{"name":"thread","value":"2319-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":61,"passed":0,"unknown":0,"total":61},"items":[{"uid":"6a22229f5bdb7b0f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/58//#testresult/6a22229f5bdb7b0f","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701752842043,"stop":1701752846008,"duration":3965}},{"uid":"69959d4031df3a30","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/57//#testresult/69959d4031df3a30","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701666450493,"stop":1701666454457,"duration":3964}},{"uid":"d902fb2d2f62fe43","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/56//#testresult/d902fb2d2f62fe43","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701579996627,"stop":1701580000624,"duration":3997}},{"uid":"935bb24ae13dddf4","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/55//#testresult/935bb24ae13dddf4","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701493592033,"stop":1701493595743,"duration":3710}},{"uid":"ec3fb7700d582705","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/54//#testresult/ec3fb7700d582705","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701407250167,"stop":1701407253771,"duration":3604}},{"uid":"2311a5b50249ce1d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/53//#testresult/2311a5b50249ce1d","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701320841909,"stop":1701320845891,"duration":3982}},{"uid":"bed3f787b8af4943","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/52//#testresult/bed3f787b8af4943","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701234433376,"stop":1701234437078,"duration":3702}},{"uid":"953ee60dbac3f80","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/51//#testresult/953ee60dbac3f80","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701148042225,"stop":1701148045609,"duration":3384}},{"uid":"43c446a01e58636e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/50//#testresult/43c446a01e58636e","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1701061658042,"stop":1701061662184,"duration":4142}},{"uid":"dfbdef9fc96ea283","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/49//#testresult/dfbdef9fc96ea283","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700975190228,"stop":1700975193859,"duration":3631}},{"uid":"56cf0350adc7f64f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/48//#testresult/56cf0350adc7f64f","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700888769324,"stop":1700888773513,"duration":4189}},{"uid":"443b493eed750254","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/47//#testresult/443b493eed750254","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700802423817,"stop":1700802427479,"duration":3662}},{"uid":"759bd942c5020df6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/46//#testresult/759bd942c5020df6","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700716048553,"stop":1700716052560,"duration":4007}},{"uid":"96d46711f977b557","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/45//#testresult/96d46711f977b557","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700629649821,"stop":1700629653977,"duration":4156}},{"uid":"c27ea9709e5f703","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/44//#testresult/c27ea9709e5f703","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700543237212,"stop":1700543240839,"duration":3627}},{"uid":"8e8b0bcb61961913","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/43//#testresult/8e8b0bcb61961913","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700456841501,"stop":1700456845191,"duration":3690}},{"uid":"f617b2b94e693c9e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/42//#testresult/f617b2b94e693c9e","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700370408898,"stop":1700370412898,"duration":4000}},{"uid":"ed9a66e6c07652a1","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/41//#testresult/ed9a66e6c07652a1","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700283993688,"stop":1700283997505,"duration":3817}},{"uid":"4e0746aa1b5efc5c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/40//#testresult/4e0746aa1b5efc5c","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700197613507,"stop":1700197617118,"duration":3611}},{"uid":"50a5c94f6afbd47b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/39//#testresult/50a5c94f6afbd47b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1700111239820,"stop":1700111244372,"duration":4552}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"66156dc89e7dd234.json","parameterValues":[]}