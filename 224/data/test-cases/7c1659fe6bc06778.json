{"uid":"7c1659fe6bc06778","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1715922541045,"stop":1715922546027,"duration":4982},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7fd2a772da90>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7fd2a772da90>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1715922541045,"stop":1715922542107,"duration":1062},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1715922542107,"stop":1715922543164,"duration":1057},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1715922543165,"stop":1715922543722,"duration":557},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/96982'","time":{"start":1715922543722,"stop":1715922544866,"duration":1144},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET request to URL '/user/96982'","time":{"start":1715922544866,"stop":1715922546027,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az1272-211"},{"name":"thread","value":"2271-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":222,"passed":0,"unknown":0,"total":222},"items":[{"uid":"68c8ae2dc920d9f2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/223//#testresult/68c8ae2dc920d9f2","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715836113635,"stop":1715836118217,"duration":4582}},{"uid":"ea793c87d1110d76","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/222//#testresult/ea793c87d1110d76","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715749673372,"stop":1715749678176,"duration":4804}},{"uid":"4cf34ce4e8697eb4","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/221//#testresult/4cf34ce4e8697eb4","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715663328761,"stop":1715663333412,"duration":4651}},{"uid":"c3724efdac3015d7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/220//#testresult/c3724efdac3015d7","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715576940497,"stop":1715576945167,"duration":4670}},{"uid":"d3690609b538123f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/219//#testresult/d3690609b538123f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715490452726,"stop":1715490458177,"duration":5451}},{"uid":"dac9c0d5c3bb2110","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/218//#testresult/dac9c0d5c3bb2110","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715404036420,"stop":1715404040947,"duration":4527}},{"uid":"8a5c30883b4c6bfe","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/217//#testresult/8a5c30883b4c6bfe","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715317677999,"stop":1715317683448,"duration":5449}},{"uid":"b16032a317b229de","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/216//#testresult/b16032a317b229de","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715231340041,"stop":1715231344709,"duration":4668}},{"uid":"2f519996bf4da584","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/215//#testresult/2f519996bf4da584","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715144866429,"stop":1715144871103,"duration":4674}},{"uid":"9671b00d5171b205","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/214//#testresult/9671b00d5171b205","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1715058563326,"stop":1715058568028,"duration":4702}},{"uid":"945fc448873b469b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/213//#testresult/945fc448873b469b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='playground.learnqa.ru', port=443): Max retries exceeded with url: /api/user/ (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1006)')))","time":{"start":1714972071224,"stop":1714972071499,"duration":275}},{"uid":"ee972b92964635a9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/212//#testresult/ee972b92964635a9","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714885659259,"stop":1714885663915,"duration":4656}},{"uid":"37a19cfa4c55be8d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/211//#testresult/37a19cfa4c55be8d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714799228118,"stop":1714799232481,"duration":4363}},{"uid":"913b8123b49887a0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/210//#testresult/913b8123b49887a0","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714712889767,"stop":1714712895070,"duration":5303}},{"uid":"b0356ae8041cd616","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/209//#testresult/b0356ae8041cd616","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714626562327,"stop":1714626567002,"duration":4675}},{"uid":"d403c4a31fe95970","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/208//#testresult/d403c4a31fe95970","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714540058950,"stop":1714540064164,"duration":5214}},{"uid":"8654e19f57f412b2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/207//#testresult/8654e19f57f412b2","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714453657126,"stop":1714453662621,"duration":5495}},{"uid":"758c84685efabc4a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/206//#testresult/758c84685efabc4a","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714367265747,"stop":1714367270099,"duration":4352}},{"uid":"271c8cfc4c6ede04","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/205//#testresult/271c8cfc4c6ede04","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714280898736,"stop":1714280903473,"duration":4737}},{"uid":"be1895ddc87fa40b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/204//#testresult/be1895ddc87fa40b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1714194469863,"stop":1714194475179,"duration":5316}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"7c1659fe6bc06778.json","parameterValues":[]}