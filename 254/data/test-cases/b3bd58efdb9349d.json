{"uid":"b3bd58efdb9349d","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1718514537103,"stop":1718514540257,"duration":3154},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f12413b3190>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7f12413b3190>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests/test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib/assertions.py:81: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1718514537103,"stop":1718514537975,"duration":872},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1718514537975,"stop":1718514538847,"duration":872},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1718514538847,"stop":1718514539246,"duration":399},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/98819'","time":{"start":1718514539246,"stop":1718514540257,"duration":1011},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az570-139"},{"name":"thread","value":"2264-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":252,"passed":0,"unknown":0,"total":252},"items":[{"uid":"a323dee5f9225061","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/253//#testresult/a323dee5f9225061","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718428123171,"stop":1718428128366,"duration":5195}},{"uid":"c3dc0e378f386a71","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/252//#testresult/c3dc0e378f386a71","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718341670303,"stop":1718341674596,"duration":4293}},{"uid":"3727f08b67aa7586","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/251//#testresult/3727f08b67aa7586","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718255370581,"stop":1718255375050,"duration":4469}},{"uid":"1f1d3c80a530e568","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/250//#testresult/1f1d3c80a530e568","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718168885516,"stop":1718168890020,"duration":4504}},{"uid":"c274e7ac6e40354","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/249//#testresult/c274e7ac6e40354","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1718082556922,"stop":1718082561926,"duration":5004}},{"uid":"dd163052487afac1","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/248//#testresult/dd163052487afac1","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717996114250,"stop":1717996118691,"duration":4441}},{"uid":"a11feb57434629ba","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/247//#testresult/a11feb57434629ba","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717909678780,"stop":1717909683974,"duration":5194}},{"uid":"f21b81b07da21e5d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/246//#testresult/f21b81b07da21e5d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717823281114,"stop":1717823285917,"duration":4803}},{"uid":"2fd8afcf5f5492c9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/245//#testresult/2fd8afcf5f5492c9","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717736928867,"stop":1717736934068,"duration":5201}},{"uid":"c057e93b17557483","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/244//#testresult/c057e93b17557483","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717650556452,"stop":1717650561642,"duration":5190}},{"uid":"f74981612ee36ef7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/243//#testresult/f74981612ee36ef7","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717564071117,"stop":1717564075494,"duration":4377}},{"uid":"ad3189fa838f2488","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/242//#testresult/ad3189fa838f2488","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717477791333,"stop":1717477795752,"duration":4419}},{"uid":"b73a65694da3512f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/241//#testresult/b73a65694da3512f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717391373493,"stop":1717391379296,"duration":5803}},{"uid":"e3b34ba68c58374f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/240//#testresult/e3b34ba68c58374f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717304865153,"stop":1717304869288,"duration":4135}},{"uid":"1e62ac6d4bacc1cc","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/239//#testresult/1e62ac6d4bacc1cc","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717218505577,"stop":1717218510448,"duration":4871}},{"uid":"991dd7f573144d05","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/238//#testresult/991dd7f573144d05","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717132140983,"stop":1717132146539,"duration":5556}},{"uid":"17ad258ade87ce29","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/237//#testresult/17ad258ade87ce29","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1717045679123,"stop":1717045683533,"duration":4410}},{"uid":"6060709d758faf0f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/236//#testresult/6060709d758faf0f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1716959334010,"stop":1716959337398,"duration":3388}},{"uid":"48d3597a4604a7a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/235//#testresult/48d3597a4604a7a","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1716872880720,"stop":1716872886249,"duration":5529}},{"uid":"2a1a5d54a355381a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/234//#testresult/2a1a5d54a355381a","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1716786522230,"stop":1716786527204,"duration":4974}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"b3bd58efdb9349d.json","parameterValues":[]}