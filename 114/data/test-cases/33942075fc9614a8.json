{"uid":"33942075fc9614a8","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1706418454967,"stop":1706418458580,"duration":3613},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7fe9e0394b10>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7fe9e0394b10>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1706418454967,"stop":1706418456136,"duration":1169},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1706418456136,"stop":1706418457110,"duration":974},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1706418457111,"stop":1706418457568,"duration":457},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/89971'","time":{"start":1706418457568,"stop":1706418458580,"duration":1012},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az1210-76"},{"name":"thread","value":"2318-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":112,"passed":0,"unknown":0,"total":112},"items":[{"uid":"9e8edbd766eea782","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/113//#testresult/9e8edbd766eea782","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706332000215,"stop":1706332004514,"duration":4299}},{"uid":"3061f2bf138fe3f5","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/112//#testresult/3061f2bf138fe3f5","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706245615929,"stop":1706245620401,"duration":4472}},{"uid":"8fa885bf089c13d8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/111//#testresult/8fa885bf089c13d8","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706159241093,"stop":1706159244383,"duration":3290}},{"uid":"ece7268328458eaf","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/110//#testresult/ece7268328458eaf","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1706072838705,"stop":1706072842035,"duration":3330}},{"uid":"ca64a66f1a24eb6d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/109//#testresult/ca64a66f1a24eb6d","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705986444758,"stop":1705986448099,"duration":3341}},{"uid":"db38948902aae2cd","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/108//#testresult/db38948902aae2cd","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705900081863,"stop":1705900085978,"duration":4115}},{"uid":"2cb9ea1bc5090867","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/107//#testresult/2cb9ea1bc5090867","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705815625195,"stop":1705815629359,"duration":4164}},{"uid":"d958009a8b3fe693","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/106//#testresult/d958009a8b3fe693","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705727221277,"stop":1705727224771,"duration":3494}},{"uid":"6ac1ddfaf450ad4c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/105//#testresult/6ac1ddfaf450ad4c","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705640839230,"stop":1705640842749,"duration":3519}},{"uid":"437f0a6d9e3c194a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/104//#testresult/437f0a6d9e3c194a","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705554441859,"stop":1705554445582,"duration":3723}},{"uid":"f98f907359296fbe","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/103//#testresult/f98f907359296fbe","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705468031191,"stop":1705468034540,"duration":3349}},{"uid":"c151edd191aba073","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/102//#testresult/c151edd191aba073","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705381630144,"stop":1705381634072,"duration":3928}},{"uid":"152401b878031ea0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/101//#testresult/152401b878031ea0","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705295287939,"stop":1705295291972,"duration":4033}},{"uid":"9f289d649019e8c2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/100//#testresult/9f289d649019e8c2","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705230288798,"stop":1705230292691,"duration":3893}},{"uid":"59a2a32f572fd95d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/99//#testresult/59a2a32f572fd95d","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1705230267337,"stop":1705230271160,"duration":3823}},{"uid":"fd6908661fae2842","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/94//#testresult/fd6908661fae2842","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704863235627,"stop":1704863239584,"duration":3957}},{"uid":"9e575cef933c6aed","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/93//#testresult/9e575cef933c6aed","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704776837255,"stop":1704776841099,"duration":3844}},{"uid":"20a3a2e75ec60588","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/92//#testresult/20a3a2e75ec60588","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704690450800,"stop":1704690454644,"duration":3844}},{"uid":"58913b65f205a1c2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/91//#testresult/58913b65f205a1c2","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704604021764,"stop":1704604025420,"duration":3656}},{"uid":"a61cc9e744198332","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/90//#testresult/a61cc9e744198332","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704517616298,"stop":1704517619912,"duration":3614}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"33942075fc9614a8.json","parameterValues":[]}