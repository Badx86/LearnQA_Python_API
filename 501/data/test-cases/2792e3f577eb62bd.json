{"uid":"2792e3f577eb62bd","name":"test_edit_user_authorized_as_another_user","fullName":"tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user","historyId":"66de907b35b2a1725a23e523e3ac16ef","time":{"start":1745125942132,"stop":1745125946741,"duration":4609},"description":"This test checks the inability to edit a user when authorized as another user","descriptionHtml":"<p>This test checks the inability to edit a user when authorized as another user</p>\n","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7efdb2701350>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks the inability to edit a user when authorized as another user","status":"skipped","statusMessage":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","statusTrace":"self = <tests.test_user_edit.TestUserEdit object at 0x7efdb2701350>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n        Assertions.assert_code_status(response4, 400)\n        # Убеждаемся, что имя первого пользователя не изменилось\n        response5 = MyRequests.get(f\"/user/{first_user_id}\")\n        # print(response5.json())\n>       Assertions.assert_json_value_by_name(response5, \"firstName\", first_user_data['firstName'],\n                                             \"Name of the first user was changed.\")\n\ntests/test_user_edit.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'Test'\nerror_message = 'Name of the first user was changed.'\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        \"\"\"\n        Проверяет, что ответ содержит JSON и в этом JSON присутствует поле с ожидаемым значением\n    \n        :param response: Ответ от сервера\n        :param name: Ключ в JSON, который необходимо проверить\n        :param expected_value: Ожидаемое значение ключа\n        :param error_message: Сообщение об ошибке, которое будет выведено, если проверка не пройдет\n        \"\"\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn`t have key '{name}'\"\nE       AssertionError: Response JSON doesn`t have key 'firstName'\n\nlib/assertions.py:24: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1745125942132,"stop":1745125943109,"duration":977},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1745125943110,"stop":1745125944057,"duration":947},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1745125944058,"stop":1745125944509,"duration":451},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"PUT request to URL '/user/121433'","time":{"start":1745125944509,"stop":1745125945630,"duration":1121},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET request to URL '/user/121433'","time":{"start":1745125945630,"stop":1745125946741,"duration":1111},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Modification Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEdit"},{"name":"host","value":"fv-az1371-571"},{"name":"thread","value":"2431-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":437,"passed":0,"unknown":0,"total":437},"items":[{"uid":"980f5ffb84cce6af","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/500//#testresult/980f5ffb84cce6af","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1745039521576,"stop":1745039526361,"duration":4785}},{"uid":"1e352d315ff4b2d8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/499//#testresult/1e352d315ff4b2d8","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1744953205418,"stop":1744953210153,"duration":4735}},{"uid":"3cb4575d2bbbce02","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/498//#testresult/3cb4575d2bbbce02","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1744924854905,"stop":1744924860319,"duration":5414}},{"uid":"9ae93761003097f5","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/435//#testresult/9ae93761003097f5","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1734152952211,"stop":1734152956980,"duration":4769}},{"uid":"962feae1c80b91a5","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/434//#testresult/962feae1c80b91a5","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1734066617274,"stop":1734066621573,"duration":4299}},{"uid":"59bbe1c916f6f8b5","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/433//#testresult/59bbe1c916f6f8b5","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733980218552,"stop":1733980223400,"duration":4848}},{"uid":"bbe486e582891d0e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/432//#testresult/bbe486e582891d0e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1733893815069,"stop":1733893818586,"duration":3517}},{"uid":"5f392366587213b3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/431//#testresult/5f392366587213b3","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733807417624,"stop":1733807421965,"duration":4341}},{"uid":"6eb9213f0cb98544","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/430//#testresult/6eb9213f0cb98544","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733721060399,"stop":1733721064948,"duration":4549}},{"uid":"db069a9b5495120e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/429//#testresult/db069a9b5495120e","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200","time":{"start":1733634567023,"stop":1733634570564,"duration":3541}},{"uid":"ab87e33ca2372d6d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/428//#testresult/ab87e33ca2372d6d","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733548160909,"stop":1733548165206,"duration":4297}},{"uid":"25a811fc056082c7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/427//#testresult/25a811fc056082c7","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733461810761,"stop":1733461816043,"duration":5282}},{"uid":"3eef2c658c5d4141","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/426//#testresult/3eef2c658c5d4141","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733375444400,"stop":1733375449707,"duration":5307}},{"uid":"ff4211f5f6b3dbd2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/425//#testresult/ff4211f5f6b3dbd2","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733289015837,"stop":1733289020697,"duration":4860}},{"uid":"88a9cc024caa0d76","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/424//#testresult/88a9cc024caa0d76","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733202614882,"stop":1733202619701,"duration":4819}},{"uid":"3af6053898fe0c45","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/423//#testresult/3af6053898fe0c45","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733116245342,"stop":1733116249651,"duration":4309}},{"uid":"6d15dc2fa4f0541","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/422//#testresult/6d15dc2fa4f0541","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1733029798286,"stop":1733029803480,"duration":5194}},{"uid":"c53ab369029ee10b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/421//#testresult/c53ab369029ee10b","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1732943360642,"stop":1732943366329,"duration":5687}},{"uid":"80e95bd97b97adf7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/420//#testresult/80e95bd97b97adf7","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1732857012452,"stop":1732857017047,"duration":4595}},{"uid":"7a2d97111b8a788f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/419//#testresult/7a2d97111b8a788f","status":"skipped","statusDetails":"XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Response JSON doesn`t have key 'firstName'","time":{"start":1732770620848,"stop":1732770625198,"duration":4350}}]},"tags":["@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"]},"source":"2792e3f577eb62bd.json","parameterValues":[]}