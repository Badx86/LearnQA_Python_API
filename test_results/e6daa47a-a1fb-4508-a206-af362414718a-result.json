{"name": "test_edit_user_authorized_as_another_user", "status": "skipped", "statusDetails": {"message": "XFAIL API allows unauthorized edits. Needs to be fixed.\n\nAssertionError: Unexpected status code! Expected: 400. Actual: 200", "trace": "self = <tests.test_user_edit.TestUserEdit object at 0x000001A63737ED50>\n\n    @pytest.mark.xfail(reason=\"API allows unauthorized edits. Needs to be fixed.\")\n    @allure.description(\"This test checks the inability to edit a user when authorized as another user\")\n    def test_edit_user_authorized_as_another_user(self):\n        # Создаем первого пользователя\n        first_user_data = self.preapare_registration_data()\n        response1 = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response1, \"id\")\n    \n        # Создаем второго пользователя и авторизуемся\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n        login_data = {\n            'email': second_user_data['email'],\n            'password': second_user_data['password']\n        }\n        response3 = MyRequests.post(\"/user/login\", data=login_data)\n        auth_sid = self.get_cookie(response3, \"auth_sid\")\n        token = self.get_header(response3, \"x-csrf-token\")\n    \n        # Попытка редактирования первого пользователя от имени второго\n        new_name = \"Changed Name By Another User\"\n        response4 = MyRequests.put(f\"/user/{first_user_id}\",\n                                   headers={\"x-csrf-token\": token},\n                                   cookies={\"auth_sid\": auth_sid},\n                                   data={\"firstName\": new_name}\n                                   )\n    \n        # Ожидаем ошибку, так как это не должно быть разрешено\n        # Попытка редактирования данных другого пользователя должна завершиться ошибкой\n>       Assertions.assert_code_status(response4, 400)\n\ntests\\test_user_edit.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_status_code = 400\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        \"\"\"\n        Проверяет, что статус ответа соответствует ожидаемому\n    \n        :param response: Ответ от сервера\n        :param expected_status_code: Ожидаемый статус кода ответа\n        \"\"\"\n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 400. Actual: 200\n\nlib\\assertions.py:81: AssertionError"}, "description": "This test checks the inability to edit a user when authorized as another user", "steps": [{"name": "POST request to URL '/user/'", "status": "passed", "start": 1697124209590, "stop": 1697124210462}, {"name": "POST request to URL '/user/'", "status": "passed", "start": 1697124210462, "stop": 1697124211337}, {"name": "POST request to URL '/user/login'", "status": "passed", "start": 1697124211338, "stop": 1697124211768}, {"name": "PUT request to URL '/user/82169'", "status": "passed", "start": 1697124211768, "stop": 1697124212748}], "start": 1697124209589, "stop": 1697124212749, "uuid": "ef36730a-5fc1-425e-a241-76a28bec5ad7", "historyId": "66de907b35b2a1725a23e523e3ac16ef", "testCaseId": "66de907b35b2a1725a23e523e3ac16ef", "fullName": "tests.test_user_edit.TestUserEdit#test_edit_user_authorized_as_another_user", "labels": [{"name": "epic", "value": "User Edit Functionality"}, {"name": "tag", "value": "@pytest.mark.xfail(reason='API allows unauthorized edits. Needs to be fixed.')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_edit"}, {"name": "subSuite", "value": "TestUserEdit"}, {"name": "host", "value": "LAPTOP-SFQ2DO00"}, {"name": "thread", "value": "18160-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_edit"}]}