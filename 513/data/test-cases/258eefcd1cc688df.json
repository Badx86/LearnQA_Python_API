{"uid":"258eefcd1cc688df","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1746162809016,"stop":1746162812288,"duration":3272},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7fb73da8b2d0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7fb73da8b2d0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1746162809016,"stop":1746162809914,"duration":898},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1746162809914,"stop":1746162810828,"duration":914},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1746162810828,"stop":1746162811241,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/121935'","time":{"start":1746162811241,"stop":1746162812287,"duration":1046},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az1315-192"},{"name":"thread","value":"2420-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":162,"passed":287,"unknown":0,"total":449},"items":[{"uid":"d3d54bd2b994d056","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/512//#testresult/d3d54bd2b994d056","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746076426803,"stop":1746076432098,"duration":5295}},{"uid":"300fc49287971379","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/511//#testresult/300fc49287971379","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745989986515,"stop":1745989991571,"duration":5056}},{"uid":"bbd606d3de306bcc","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/510//#testresult/bbd606d3de306bcc","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745903609422,"stop":1745903614594,"duration":5172}},{"uid":"5b3b7a07b289feb3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/509//#testresult/5b3b7a07b289feb3","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745817470787,"stop":1745817475882,"duration":5095}},{"uid":"209a90af3b93ddd0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/508//#testresult/209a90af3b93ddd0","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745730752968,"stop":1745730757484,"duration":4516}},{"uid":"81d370fbf1ed313b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/507//#testresult/81d370fbf1ed313b","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745644307515,"stop":1745644312532,"duration":5017}},{"uid":"12c2d8ca14674e65","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/506//#testresult/12c2d8ca14674e65","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745558000638,"stop":1745558005972,"duration":5334}},{"uid":"3166b65e22125a6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/505//#testresult/3166b65e22125a6","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745471612829,"stop":1745471618086,"duration":5257}},{"uid":"eadcffcab4845e90","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/504//#testresult/eadcffcab4845e90","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745385199891,"stop":1745385204448,"duration":4557}},{"uid":"d80a411d7c62447e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/503//#testresult/d80a411d7c62447e","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745298799547,"stop":1745298804065,"duration":4518}},{"uid":"7cd7dc49d835d3f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/502//#testresult/7cd7dc49d835d3f","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745212421558,"stop":1745212426115,"duration":4557}},{"uid":"7c9cd1b9b9395036","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/501//#testresult/7c9cd1b9b9395036","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745125931878,"stop":1745125936478,"duration":4600}},{"uid":"da302909b01b52d2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/500//#testresult/da302909b01b52d2","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745039510898,"stop":1745039515648,"duration":4750}},{"uid":"49a3807c56b2b4b9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/499//#testresult/49a3807c56b2b4b9","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1744953195807,"stop":1744953200029,"duration":4222}},{"uid":"483c6e2e8e56a5cf","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/498//#testresult/483c6e2e8e56a5cf","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1744924843117,"stop":1744924848645,"duration":5528}},{"uid":"1835152addcfebe3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/435//#testresult/1835152addcfebe3","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1734152941992,"stop":1734152947119,"duration":5127}},{"uid":"a3128406b5797d60","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/434//#testresult/a3128406b5797d60","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1734066606876,"stop":1734066611445,"duration":4569}},{"uid":"58a0522c1fbaf255","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/433//#testresult/58a0522c1fbaf255","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1733980208635,"stop":1733980212933,"duration":4298}},{"uid":"49b28639283f0a3d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/432//#testresult/49b28639283f0a3d","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1733893804444,"stop":1733893808963,"duration":4519}},{"uid":"2fa814cdb0105cc2","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/431//#testresult/2fa814cdb0105cc2","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1733807407354,"stop":1733807412049,"duration":4695}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"258eefcd1cc688df.json","parameterValues":[]}