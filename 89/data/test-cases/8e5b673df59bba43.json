{"uid":"8e5b673df59bba43","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1704431244034,"stop":1704431247496,"duration":3462},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7fe95d2505d0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7fe95d2505d0>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1704431244034,"stop":1704431244985,"duration":951},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1704431244986,"stop":1704431245928,"duration":942},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1704431245929,"stop":1704431246399,"duration":470},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/88907'","time":{"start":1704431246399,"stop":1704431247495,"duration":1096},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az661-160"},{"name":"thread","value":"2206-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":91,"passed":0,"unknown":0,"total":91},"items":[{"uid":"7aede2c77af4de2b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/88//#testresult/7aede2c77af4de2b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704344849857,"stop":1704344853474,"duration":3617}},{"uid":"32ffb49b8187e2d9","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/87//#testresult/32ffb49b8187e2d9","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704258425192,"stop":1704258429058,"duration":3866}},{"uid":"3597960f72312c39","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/86//#testresult/3597960f72312c39","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704172041440,"stop":1704172045418,"duration":3978}},{"uid":"95fd20ed564aa222","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/85//#testresult/95fd20ed564aa222","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1704085673214,"stop":1704085677307,"duration":4093}},{"uid":"39dd8ffc49a51f2b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/84//#testresult/39dd8ffc49a51f2b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703999197934,"stop":1703999201909,"duration":3975}},{"uid":"ee007a24358177b0","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/83//#testresult/ee007a24358177b0","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703912819613,"stop":1703912823074,"duration":3461}},{"uid":"1f40e92f716bac0f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/82//#testresult/1f40e92f716bac0f","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703826453311,"stop":1703826457414,"duration":4103}},{"uid":"523878f4899770ab","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/81//#testresult/523878f4899770ab","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703740047758,"stop":1703740051193,"duration":3435}},{"uid":"c8813d3d6780103a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/80//#testresult/c8813d3d6780103a","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703653630687,"stop":1703653634307,"duration":3620}},{"uid":"b43c96e138b3bf29","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/79//#testresult/b43c96e138b3bf29","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703567232735,"stop":1703567236690,"duration":3955}},{"uid":"923d91c9dc1eebf7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/78//#testresult/923d91c9dc1eebf7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703480852225,"stop":1703480856202,"duration":3977}},{"uid":"5f672c9b06e15334","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/77//#testresult/5f672c9b06e15334","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703394429319,"stop":1703394433262,"duration":3943}},{"uid":"de86ee7ab334bc90","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/76//#testresult/de86ee7ab334bc90","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703307999055,"stop":1703308002624,"duration":3569}},{"uid":"97e8b204d50ef07b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/75//#testresult/97e8b204d50ef07b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703221626450,"stop":1703221630035,"duration":3585}},{"uid":"715d76f05f1100c7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/74//#testresult/715d76f05f1100c7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703135232610,"stop":1703135236721,"duration":4111}},{"uid":"64f52fb9973ef574","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/73//#testresult/64f52fb9973ef574","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1703048707328,"stop":1703048711278,"duration":3950}},{"uid":"6763c5a4ed461f96","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/72//#testresult/6763c5a4ed461f96","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702962443417,"stop":1702962447920,"duration":4503}},{"uid":"e3769355262faed7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/71//#testresult/e3769355262faed7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702876051073,"stop":1702876055057,"duration":3984}},{"uid":"fe4bda8d817587a3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/70//#testresult/fe4bda8d817587a3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702789615094,"stop":1702789619213,"duration":4119}},{"uid":"47adf2096e7bee4f","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/69//#testresult/47adf2096e7bee4f","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1702703200487,"stop":1702703204793,"duration":4306}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"8e5b673df59bba43.json","parameterValues":[]}