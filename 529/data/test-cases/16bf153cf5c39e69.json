{"uid":"16bf153cf5c39e69","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1747545156034,"stop":1747545159700,"duration":3666},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7ff724094650>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7ff724094650>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1747545156035,"stop":1747545156961,"duration":926},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/'","time":{"start":1747545156962,"stop":1747545157860,"duration":898},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST request to URL '/user/login'","time":{"start":1747545157860,"stop":1747545158629,"duration":769},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"DELETE request to URL '/user/122999'","time":{"start":1747545158629,"stop":1747545159699,"duration":1070},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az1718-125"},{"name":"thread","value":"2452-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":163,"passed":302,"unknown":0,"total":465},"items":[{"uid":"5e0e112c8ab9320b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/528//#testresult/5e0e112c8ab9320b","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1747458736274,"stop":1747458740926,"duration":4652}},{"uid":"a05cadd62cea7ea3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/527//#testresult/a05cadd62cea7ea3","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1747372427566,"stop":1747372432147,"duration":4581}},{"uid":"55ab528a7177b663","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/526//#testresult/55ab528a7177b663","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1747286036654,"stop":1747286041147,"duration":4493}},{"uid":"df67f46e641861e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/525//#testresult/df67f46e641861e","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1747199603586,"stop":1747199608213,"duration":4627}},{"uid":"560407ec0c0407c4","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/524//#testresult/560407ec0c0407c4","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1747113197766,"stop":1747113202381,"duration":4615}},{"uid":"d343c0c3c11df05a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/523//#testresult/d343c0c3c11df05a","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1747026830459,"stop":1747026835176,"duration":4717}},{"uid":"8a0e32422250d4af","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/522//#testresult/8a0e32422250d4af","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746940345970,"stop":1746940351173,"duration":5203}},{"uid":"123649fd51a5647d","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/521//#testresult/123649fd51a5647d","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746853929922,"stop":1746853935152,"duration":5230}},{"uid":"3bac32dddeb613b7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/520//#testresult/3bac32dddeb613b7","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746767609307,"stop":1746767614219,"duration":4912}},{"uid":"423014247eaeb877","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/519//#testresult/423014247eaeb877","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746681226535,"stop":1746681232212,"duration":5677}},{"uid":"a3f7f04af1d9f930","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/518//#testresult/a3f7f04af1d9f930","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746594810584,"stop":1746594815406,"duration":4822}},{"uid":"7602f7c15dd0cda","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/517//#testresult/7602f7c15dd0cda","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746508421550,"stop":1746508426889,"duration":5339}},{"uid":"3c4048a56fcc376e","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/516//#testresult/3c4048a56fcc376e","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746422047703,"stop":1746422053027,"duration":5324}},{"uid":"cb7fd2dbeccfc71","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/515//#testresult/cb7fd2dbeccfc71","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746335568832,"stop":1746335574207,"duration":5375}},{"uid":"71120981dc77e71","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/514//#testresult/71120981dc77e71","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746249131464,"stop":1746249136740,"duration":5276}},{"uid":"258eefcd1cc688df","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/513//#testresult/258eefcd1cc688df","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1746162809016,"stop":1746162812288,"duration":3272}},{"uid":"d3d54bd2b994d056","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/512//#testresult/d3d54bd2b994d056","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1746076426803,"stop":1746076432098,"duration":5295}},{"uid":"300fc49287971379","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/511//#testresult/300fc49287971379","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745989986515,"stop":1745989991571,"duration":5056}},{"uid":"bbd606d3de306bcc","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/510//#testresult/bbd606d3de306bcc","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745903609422,"stop":1745903614594,"duration":5172}},{"uid":"5b3b7a07b289feb3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/509//#testresult/5b3b7a07b289feb3","status":"passed","statusDetails":"XPASS This test is expected to fail due to a known defect","time":{"start":1745817470787,"stop":1745817475882,"duration":5095}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"16bf153cf5c39e69.json","parameterValues":[]}