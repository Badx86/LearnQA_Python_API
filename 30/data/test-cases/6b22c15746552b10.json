{"uid":"6b22c15746552b10","name":"test_delete_user_authorized_as_another_user","fullName":"tests.test_user_delete.TestUserDelete#test_delete_user_authorized_as_another_user","historyId":"f921dd3d5d139c34912ef23ea50982dc","time":{"start":1699333603646,"stop":1699333607713,"duration":4067},"description":"This test verifies that one user cannot delete another user","descriptionHtml":"<p>This test verifies that one user cannot delete another user</p>\n","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f1de2436e50>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test verifies that one user cannot delete another user","status":"skipped","statusMessage":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_user_delete.TestUserDelete object at 0x7f1de2436e50>\n\n    @pytest.mark.xfail(reason=\"This test is expected to fail due to a known defect\")\n    @allure.description(\"This test verifies that one user cannot delete another user\")\n    def test_delete_user_authorized_as_another_user(self):\n        # Создание двух пользователей\n        first_user_data = self.preapare_registration_data()\n        response_first_user = MyRequests.post(\"/user/\", data=first_user_data)\n        first_user_id = self.get_json_value(response_first_user, \"id\")\n        second_user_data = self.preapare_registration_data()\n        MyRequests.post(\"/user/\", data=second_user_data)\n    \n        # Авторизация под вторым пользователем\n        response1 = MyRequests.post(\"/user/login\",\n                                    data={'email': second_user_data['email'], 'password': second_user_data['password']})\n        auth_sid = self.get_cookie(response1, \"auth_sid\")\n        token = self.get_header(response1, \"x-csrf-token\")\n    \n        # Попытка удалить первого пользователя из-под учетной записи второго пользователя\n        response2 = MyRequests.delete(f\"/user/{first_user_id}\",\n                                      headers={\"x-csrf-token\": token},\n                                      cookies={\"auth_sid\": auth_sid})\n>       assert response2.status_code == 400, f\"Unexpected status code {response2.status_code}\"\nE       AssertionError: Unexpected status code 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_user_delete.py:71: AssertionError","steps":[{"name":"POST request to URL '/user/'","time":{"start":1699333603646,"stop":1699333604874,"duration":1228},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"POST request to URL '/user/'","time":{"start":1699333604874,"stop":1699333605843,"duration":969},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"POST request to URL '/user/login'","time":{"start":1699333605844,"stop":1699333606330,"duration":486},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"DELETE request to URL '/user/84182'","time":{"start":1699333606330,"stop":1699333607713,"duration":1383},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"User Deletion Tests"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_delete"},{"name":"subSuite","value":"TestUserDelete"},{"name":"host","value":"fv-az406-673"},{"name":"thread","value":"2189-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":32,"passed":0,"unknown":0,"total":32},"items":[{"uid":"7354920b41a369dc","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/29//#testresult/7354920b41a369dc","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1699247265847,"stop":1699247269619,"duration":3772}},{"uid":"5955283b567198a6","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/28//#testresult/5955283b567198a6","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1699160802170,"stop":1699160806466,"duration":4296}},{"uid":"1aa416e66d336a89","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/27//#testresult/1aa416e66d336a89","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1699074366551,"stop":1699074370069,"duration":3518}},{"uid":"e62343b8ecafabc1","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/26//#testresult/e62343b8ecafabc1","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698988006726,"stop":1698988010938,"duration":4212}},{"uid":"533e77b2f81b39b","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/25//#testresult/533e77b2f81b39b","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698901639656,"stop":1698901644052,"duration":4396}},{"uid":"b16b96948efcba3","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/24//#testresult/b16b96948efcba3","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698815213172,"stop":1698815216919,"duration":3747}},{"uid":"fd283f793982fcac","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/23//#testresult/fd283f793982fcac","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698728810247,"stop":1698728814173,"duration":3926}},{"uid":"3c3d73a0120f7259","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/22//#testresult/3c3d73a0120f7259","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698642449425,"stop":1698642453009,"duration":3584}},{"uid":"81845aed6bc42a88","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/21//#testresult/81845aed6bc42a88","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698555991123,"stop":1698555995450,"duration":4327}},{"uid":"df8502ecd8b54ce5","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/20//#testresult/df8502ecd8b54ce5","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698469538941,"stop":1698469542854,"duration":3913}},{"uid":"c903c078bf2fe77c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/19//#testresult/c903c078bf2fe77c","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698383182391,"stop":1698383185918,"duration":3527}},{"uid":"715167e6c94eab82","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/18//#testresult/715167e6c94eab82","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698296808094,"stop":1698296812323,"duration":4229}},{"uid":"d443d60a7c5c813a","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/17//#testresult/d443d60a7c5c813a","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698210416179,"stop":1698210420540,"duration":4361}},{"uid":"17b53346f0fe1bad","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/16//#testresult/17b53346f0fe1bad","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698124022491,"stop":1698124026852,"duration":4361}},{"uid":"8ebb3caac984ccf8","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/15//#testresult/8ebb3caac984ccf8","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1698037617860,"stop":1698037621379,"duration":3519}},{"uid":"2c419434a6eba0c","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/14//#testresult/2c419434a6eba0c","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1697951196757,"stop":1697951200715,"duration":3958}},{"uid":"93ad3a0de98e6470","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/13//#testresult/93ad3a0de98e6470","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1697864786491,"stop":1697864790937,"duration":4446}},{"uid":"78bb1b5d44fc8f7","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/12//#testresult/78bb1b5d44fc8f7","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1697778392252,"stop":1697778396377,"duration":4125}},{"uid":"4dd2033a61b8bc38","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/11//#testresult/4dd2033a61b8bc38","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1697692028849,"stop":1697692032466,"duration":3617}},{"uid":"a44b0825a879c440","reportUrl":"https://Badx86.github.io/LearnQA_Python_API/10//#testresult/a44b0825a879c440","status":"skipped","statusDetails":"XFAIL This test is expected to fail due to a known defect\n\nAssertionError: Unexpected status code 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1697605631292,"stop":1697605635667,"duration":4375}}]},"tags":["@pytest.mark.xfail(reason='This test is expected to fail due to a known defect')"]},"source":"6b22c15746552b10.json","parameterValues":[]}